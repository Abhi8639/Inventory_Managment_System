package com.Inventory.Management.System.controller;

import java.sql.Date;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import com.Inventory.Management.System.model.User;
import com.Inventory.Management.System.service.UserService;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://127.0.0.1:3000", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS})
public class AuthController {

    @Autowired
    private UserService userService;

    @Autowired
    private PasswordEncoder passwordEncoder; // Injecting PasswordEncoder

    // JWT Secret Key
    private final String SECRET_KEY = "SecretKeyToGenJWTs"; // You should store this securely (e.g., in environment variables)

    // Registration Endpoint
    @PostMapping("/register")
    public ResponseEntity<User> registerUser(@RequestBody User user) {
        // Encode the password before saving the user
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        if (user.getRole() == null) {
            user.setRole("Manager");  // Set default role if it's null
        }
        User createdUser = userService.saveUser(user);
        return ResponseEntity.ok(createdUser);
    }

    // Login Endpoint
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody Map<String, String> loginRequest) {
        String email = loginRequest.get("email");
        String password = loginRequest.get("password");

        // Fetch user by email
        Optional<User> userOptional = userService.findByEmail(email);
        if (userOptional.isPresent()) {
            User user = userOptional.get();

            // Check if the password matches
            if (passwordEncoder.matches(password, user.getPassword())) {
                // Generate JWT token
                String token = generateToken(user);

                // Return token in the response
                return ResponseEntity.ok(Map.of("token", token));
            } else {
                // Invalid password
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid password");
            }
        } else {
            // User not found
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User not found");
        }
    }

    // Helper method to generate JWT Token
    private String generateToken(User user) {
        return Jwts.builder()
            .setSubject(user.getEmail())
            .setExpiration(new Date(System.currentTimeMillis() + 864_000_000)) // 10 days expiration
            .signWith(SignatureAlgorithm.HS512, SECRET_KEY)
            .compact();
    }
}
