package com.Inventory.Management.System.controller;

import java.sql.Date;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.Inventory.Management.System.model.User;
import com.Inventory.Management.System.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import com.Inventory.Management.System.model.User;
import com.Inventory.Management.System.service.UserService;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import com.Inventory.Management.System.*;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://127.0.0.1:3000", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS})
public class AuthController {

	 @Autowired
	    private UserService userService;

	    @Autowired
	    private PasswordEncoder passwordEncoder; // Injecting PasswordEncoder

	    @PostMapping("/register")
	    public ResponseEntity<User> registerUser(@RequestBody User user) {
	        // Encode the password before saving the user
	        user.setPassword(passwordEncoder.encode(user.getPassword()));
	        User createdUser = userService.saveUser(user);
	        return ResponseEntity.ok(createdUser);
	    }

	    @PostMapping("/login")
	    public ResponseEntity<String> loginUser(@RequestParam String email, @RequestParam String password) {
	        // Implement login logic here (authentication, checking password, etc.)
	        // This is just an example response
	        return ResponseEntity.ok("Login successful!");
	    }
    private String generateToken(User user) {
        // Logic to generate JWT token
        return Jwts.builder()
            .setSubject(user.getEmail())
            .setExpiration(new Date(System.currentTimeMillis() + 864_000_000)) // 10 days
            .signWith(SignatureAlgorithm.HS512, "SecretKeyToGenJWTs")
            .compact();
    }
}

